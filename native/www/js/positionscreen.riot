<positionscreen>
	<div if={is_visible} class="bar bar-standard bar-header-secondary">
		<button if={ !watchId } class="btn btn-block" onclick={ startLocating }>Update location</button>
		<button if={ watchId } class="btn btn-block " onclick={ stopLocating }>Stop updating location</button>
    </div>
    <div if={ is_visible } class="scroller con">
		<ul class="table-view">
			<li class="table-view-cell">
			<p class="small"><b>Position:</b></p>
			<p class="small">{ currentPos }</p></li>
			<li class="table-view-cell"><p><button class="btn btn-primary btn-outlined" onclick={ savepos }>Save</button>
			<button if={ !is_showmap } class="btn btn-primary btn-outlined" onclick={ showmap }>Map</button>
			<button if={ is_showmap } class="btn btn-primary" onclick={ hidemap }>Close Map</button>
			<button class="btn btn-primary btn-outlined" onclick={ sharepos } >Share</button>
			</p></li>
		</ul>
		<span class="subcontent">
			<map if={ is_showmap } id="mainmap"></map>
		</span>
	</div>

	<script>
  	export default {
			is_showmap = true;
			var that = this;
			currentPos = "Searching...";

			savepos = function() {
				window.stopLocating();
				app.trigger("openPopup", '<addpositionform/>');
				riot.mount("addpositionform", {title: "Add new Position", name: "Add Position to Tour:", position: that.coords, timestamp: new Date().toGMTString()});
				$('#description').focus();
			};

			showmap = function() {
				is_showmap = true;
				that.update();
			};

			hidemap = function() {
				is_showmap = false;
				that.update();
			};

			sharepos = function() {
				var message = { text: "I'm here: "+currentPos+", " + window.svc.getViewerUrl(that.coords.latitude, that.coords.longitude, encodeURIComponent("I'm here")) };
	        	var has_intents = false;

	        	try {
	        		has_intents = (device.platform == "iOS" || device.platform == "Android");
	        	} catch(e) {}
	        	if (has_intents) {
	        		window.socialmessage.send(message);
	        	} else {
	        		window.open( 'mailto:?subject=Position for you&body='+message.text, '_self' );
	        	}
			};

			onUpdated(props,state) {
				riot.route.exec(function(collection, bla, blub){
					is_visible = (!collection || collection == "Home" || collection == "");
					if (is_visible) {
						app.trigger("updateTitle", "ShoMe Location");
						app.trigger("redrawMap");
					}
				});
			};

			onMounted(props,state) {
				startLocating();
			};

			riot.route(function(coll, bla, blub){
				if (coll == "Home" || coll == "") {
					setTimeout(function() {
						app.trigger("redrawMap");
					},200);
				} else {
					stopLocating();
				}
			});

			app.on('updatePosition', function(coords, desc) {
				currentPos = pos2text(coords.latitude, coords.longitude);
				that.coords = coords;
				that.update();
			});
		}
	</script>
</positionscreen>
